CREATE TABLE IF NOT EXISTS my_friends(
id integer PRIMARY KEY GENERATED BY default AS IDENTITY,
name text NOT NULL,
gender text NOT NULL 
);

CREATE TABLE IF NOT EXISTS audit(
	id integer PRIMARY KEY GENERATED BY default AS IDENTITY,
	viejo_nombre text NOT NULL,
	nuevo_nombre text NOT NULL
);

INSERT INTO my_friends(name,gender)
VALUES ('Diego','M');
INSERT INTO my_friends(name,gender)
VALUES ('Sebastian','M');
INSERT INTO my_friends(name,gender)
VALUES ('Maria','F');
INSERT INTO my_friends(name,gender)
VALUES ('Valeria','F');
INSERT INTO my_friends(name,gender)
VALUES ('Fernando','M');
INSERT INTO my_friends(name,gender)
VALUES ('Romina','F');
INSERT INTO my_friends(name,gender)
VALUES ('Matias','M');
INSERT INTO my_friends(name,gender)
VALUES ('Sofia','F');


CREATE OR REPLACE FUNCTION public.agregar()
RETURNS TRIGGER
AS
$BODY$
BEGIN
INSERT INTO audit ( viejo_nombre, nuevo_nombre)
VALUES ( old.name, new.name);
RETURN NEW;
END
$BODY$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION public.notificacion()
RETURNS TRIGGER
LANGUAGE plpgsql
AS
$BODY$
BEGIN
PERFORM pg_notify('canal', row_to_json(NEW)::text);
RETURN NULL;
END
$BODY$;


CREATE TRIGGER audit_log
BEFORE UPDATE ON 
my_friends
FOR EACH ROW EXECUTE PROCEDURE
agregar();

CREATE TRIGGER modificacion
BEFORE INSERT ON
audit
FOR EACH ROW EXECUTE PROCEDURE
notificacion();
